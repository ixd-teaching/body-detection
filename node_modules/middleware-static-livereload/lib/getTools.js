"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTools = void 0;
const path = require("path");
const createFileFinder_1 = require("./createFileFinder");
const createConsole_1 = require("./createConsole");
const compileContentTypes_1 = require("./compileContentTypes");
const createSnippetInjector_1 = require("./createSnippetInjector");
const createConnectionHandler_1 = require("./createConnectionHandler");
const createFileWatcher_1 = require("./createFileWatcher");
const getTools = (options = {}) => {
    const clientScriptPath = `/${options.scriptPath || 'middleware-static-livereload.js'}`.replace(/^\/+/, '/');
    const findFile = createFileFinder_1.createFileFinder(options, {
        [clientScriptPath]: path.join(__dirname, 'client-script.js'),
        [`${clientScriptPath}/polyfill.js`]: require.resolve('event-source-polyfill/src/eventsource.min.js'),
    });
    const console = createConsole_1.createConsole(options);
    const handleConnection = createConnectionHandler_1.createConnectionHandler({ console });
    const fileWatcher = createFileWatcher_1.createFileWatcher(options);
    if (fileWatcher) {
        fileWatcher.on('all', (eventName, file) => {
            console.debug(`${eventName}: ${file}`);
            const documentRoot = findFile.documentRoots.find((pathString) => file.startsWith(pathString));
            if (documentRoot) {
                handleConnection.sendEvent(path.relative(documentRoot, file).split(path.sep).join('/'), eventName);
            }
            else {
                console.error(new Error('Cannot find a documentRoot'));
            }
        });
    }
    return {
        console,
        findFile,
        handleConnection,
        fileWatcher,
        injectSnippet: createSnippetInjector_1.createSnippetInjector(options, `<script id="middleware-static-livereload" src="${clientScriptPath}" defer></script>`),
        getContentType: compileContentTypes_1.compileContentTypes(options.contentTypes),
        connectionPath: `${clientScriptPath}/connect`,
    };
};
exports.getTools = getTools;
