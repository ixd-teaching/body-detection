"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.middleware = void 0;
const fs = require("fs");
const url_1 = require("url");
const handleError_1 = require("./handleError");
const getTools_1 = require("./getTools");
const middleware = (options) => {
    const { fileWatcher, console, connectionPath, handleConnection, findFile, getContentType, injectSnippet } = getTools_1.getTools(options);
    let counter = 0;
    const middlewareFn = (req, res, next) => {
        const id = `#${counter++}`;
        console.info(id, '←', req.method, req.url);
        const url = new url_1.URL(req.url || '/', 'http://localhost');
        if (url.pathname.startsWith(connectionPath)) {
            handleConnection(req, res);
        }
        else {
            findFile(url.pathname)
                .then(async (file) => {
                console.debug(id, '→', file.path);
                const contentType = getContentType(file.path);
                if (contentType) {
                    res.setHeader('content-type', contentType);
                }
                let reader = fs.createReadStream(file.path);
                if (`${res.getHeader('content-type')}`.startsWith('text/html')) {
                    res.setHeader('content-length', file.stats.size + injectSnippet.size);
                    reader = injectSnippet(reader);
                }
                else {
                    res.setHeader('content-length', file.stats.size);
                }
                await new Promise((resolve, reject) => {
                    res.statusCode = 200;
                    reader.pipe(res).once('error', reject).once('finish', resolve);
                });
                if (fileWatcher && findFile.documentRoots.find((documentRoot) => file.path.startsWith(documentRoot))) {
                    fileWatcher.add(file.path);
                }
            })
                .catch((error) => {
                handleError_1.handleError(id, res, error, console);
                next(error);
            })
                .then(() => console.debug(id, '→', res.statusCode, { ...res.getHeaders() }));
        }
    };
    return Object.assign(middlewareFn, { fileWatcher });
};
exports.middleware = middleware;
