"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFileFinder = void 0;
const path = require("path");
const fs = require("fs");
const os = require("os");
const ensureArray_1 = require("./ensureArray");
const absolutify_1 = require("./absolutify");
const statOrNull_1 = require("./statOrNull");
const generateIndexHTML_1 = require("./generateIndexHTML");
const LibError_1 = require("./LibError");
const createFileFinder = ({ documentRoot = process.cwd(), index = 'index.html' } = {}, reservedPaths = {}) => {
    const absoluteDocumentRoots = ensureArray_1.ensureArray(documentRoot).map((pathString) => absolutify_1.absolutify(pathString));
    const temporaryDirectory = fs.mkdtempSync(path.join(os.tmpdir(), 'node-server-'));
    return Object.assign(async (pathname) => {
        let relativePath = pathname.split('/').filter((x) => x).join(path.sep);
        let absolutePath = reservedPaths[pathname] || null;
        let stats = null;
        if (absolutePath) {
            stats = await statOrNull_1.statOrNull(absolutePath);
        }
        else {
            for (const absoluteDocumentRoot of absoluteDocumentRoots) {
                absolutePath = path.join(absoluteDocumentRoot, relativePath);
                stats = await statOrNull_1.statOrNull(absolutePath);
                if (stats) {
                    if (stats.isFile()) {
                        break;
                    }
                    else if (stats.isDirectory()) {
                        stats = await statOrNull_1.statOrNull(path.join(absolutePath, index));
                        if (stats && stats.isFile()) {
                            absolutePath = path.join(absolutePath, index);
                            relativePath = path.join(relativePath, index);
                        }
                        else {
                            const indexHTML = await generateIndexHTML_1.generateIndexHTML(absolutePath, relativePath);
                            absolutePath = path.join(temporaryDirectory, `${relativePath.split(path.sep).join('sep')}.html`);
                            await fs.promises.writeFile(absolutePath, indexHTML);
                            stats = await statOrNull_1.statOrNull(absolutePath);
                        }
                        break;
                    }
                }
                else {
                    absolutePath = stats = null;
                }
            }
        }
        if (stats && absolutePath) {
            return { path: absolutePath, relativePath, stats };
        }
        throw new LibError_1.LibError('ENOENT', relativePath);
    }, {
        documentRoots: absoluteDocumentRoots,
        isReserved: (relativePath) => relativePath in reservedPaths,
    });
};
exports.createFileFinder = createFileFinder;
